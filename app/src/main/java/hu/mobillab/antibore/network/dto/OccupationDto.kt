/*
 * bored-api
 * Bored API documentation
 *
 * OpenAPI spec version: 1.0
 * Contact: baross.anna@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package hu.mobillab.antibore.network.dto

import com.google.gson.TypeAdapter
import com.google.gson.annotations.JsonAdapter
import com.google.gson.annotations.SerializedName
import com.google.gson.stream.JsonReader
import com.google.gson.stream.JsonWriter
import java.io.IOException
import java.math.BigDecimal
import java.util.*

/**
 * Represents an occupation
 */
class OccupationDto {
    /**
     * Description of the queried activity
     * @return activity
     */
    @SerializedName("activity")
    var activity: String? = null

    /**
     * A factor describing how possible an event is to do with zero being the most accessible  [0.0, 1.0]
     * @return accessibility
     */
    @SerializedName("accessibility")
    var accessibility: BigDecimal? = null

    /**
     * Type of the activity
     */
    @JsonAdapter(TypeEnum.Adapter::class)
    enum class TypeEnum(val value: String) {
        EDUCATION("education"), RECREATIONAL("recreational"), SOCIAL("social"), DIY("diy"), CHARITY(
            "charity"
        ),
        COOKING("cooking"), RELAXATION("relaxation"), MUSIC("music"), BUSYWORK("busywork");

        override fun toString(): String {
            return value
        }

        class Adapter : TypeAdapter<TypeEnum?>() {
            @Throws(IOException::class)
            override fun write(jsonWriter: JsonWriter, enumeration: TypeEnum?) {
                jsonWriter.value(enumeration!!.value)
            }

            @Throws(IOException::class)
            override fun read(jsonReader: JsonReader): TypeEnum? {
                val value: Any = jsonReader.nextString()
                return fromValue(value.toString())
            }
        }

        companion object {
            fun fromValue(text: String): TypeEnum? {
                for (b in values()) {
                    if (b.value == text) {
                        return b
                    }
                }
                return null
            }
        }
    }

    /**
     * Type of the activity
     * @return type
     */
    @SerializedName("type")
    var type: TypeEnum? = null

    /**
     * The number of people that this activity could involve
     * @return participants
     */
    @SerializedName("participants")
    var participants: BigDecimal? = null

    /**
     * A factor describing the cost of the event with zero being free  [0, 1]
     * @return price
     */
    @SerializedName("price")
    var price: BigDecimal? = null

    /**
     * Provided URL for the activity&#x27;s starter
     * @return link
     */
    @SerializedName("link")
    var link: String? = null

    /**
     * A unique numeric id
     * @return key
     */
    @SerializedName("key")
    var key: String? = null

    fun activity(activity: String?): OccupationDto {
        this.activity = activity
        return this
    }

    fun accessibility(accessibility: BigDecimal?): OccupationDto {
        this.accessibility = accessibility
        return this
    }

    fun type(type: TypeEnum?): OccupationDto {
        this.type = type
        return this
    }

    fun participants(participants: BigDecimal?): OccupationDto {
        this.participants = participants
        return this
    }

    fun price(price: BigDecimal?): OccupationDto {
        this.price = price
        return this
    }

    fun link(link: String?): OccupationDto {
        this.link = link
        return this
    }

    fun key(key: String?): OccupationDto {
        this.key = key
        return this
    }

    override fun equals(o: Any?): Boolean {
        if (this === o) {
            return true
        }
        if (o == null || javaClass != o.javaClass) {
            return false
        }
        val occupation = o as OccupationDto
        return activity == occupation.activity &&
                accessibility == occupation.accessibility &&
                type == occupation.type &&
                participants == occupation.participants &&
                price == occupation.price &&
                link == occupation.link &&
                key == occupation.key
    }

    override fun hashCode(): Int {
        return Objects.hash(activity, accessibility, type, participants, price, link, key)
    }

    override fun toString(): String {
        val sb = StringBuilder()
        sb.append("class Occupation {\n")
        sb.append("    activity: ").append(toIndentedString(activity)).append("\n")
        sb.append("    accessibility: ").append(toIndentedString(accessibility)).append("\n")
        sb.append("    type: ").append(toIndentedString(type)).append("\n")
        sb.append("    participants: ").append(toIndentedString(participants)).append("\n")
        sb.append("    price: ").append(toIndentedString(price)).append("\n")
        sb.append("    link: ").append(toIndentedString(link)).append("\n")
        sb.append("    key: ").append(toIndentedString(key)).append("\n")
        sb.append("}")
        return sb.toString()
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private fun toIndentedString(o: Any?): String {
        return o?.toString()?.replace("\n", "\n    ") ?: "null"
    }
}